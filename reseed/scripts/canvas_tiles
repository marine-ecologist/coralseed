// Initialize the Cesium viewer
const viewer = new Cesium.Viewer("cesiumContainer", {
  baseLayer: Cesium.ImageryLayer.fromProviderAsync(
    Cesium.TileMapServiceImageryProvider.fromUrl(
      Cesium.buildModuleUrl("Assets/Textures/NaturalEarthII")
    )
  ),
  baseLayerPicker: false,
  geocoder: false,
  timeline: false,
  animation: false,
  homeButton: false,
  navigationHelpButton: false,
});

const scene = viewer.scene;

// Disable visuals safely
scene.skyBox.show = false;
scene.skyAtmosphere.show = false;
scene.sun.show = false;
scene.moon.show = false;

// Remove credits
viewer._cesiumWidget._creditContainer.style.display = "none";

// Add SST WMS layer
const wmsLayer = new Cesium.WebMapServiceImageryProvider({
    url: `https://pae-paha.pacioos.hawaii.edu/thredds/wms/dhw_5km`,
    layers: "CRW_SST",
    parameters: {
        transparent: true,
        format: "image/png",
        crs: "EPSG:4326",
       time: "2024-01-01T12:00:00.000Z",       
    },
    minimumLevel: 0,
    maximumLevel: 10, // Adjust this based on WMS capabilities
});

const sstLayer = viewer.imageryLayers.addImageryProvider(wmsLayer);


/////////////////////////////////////////////////

class CustomPaletteImageryProvider extends Cesium.UrlTemplateImageryProvider {
  constructor(options) {
    super(options); // Inherit from UrlTemplateImageryProvider

    // Create a canvas for processing tiles
    this.canvas = document.createElement("canvas");
    this.ctx = this.canvas.getContext("2d");
  }

  requestImage(x, y, level, request) {
    // Calculate the width and height of each tile in degrees
    const tileWidth = 360 / Math.pow(2, level); // Longitude range per tile
    const tileHeight = 180 / Math.pow(2, level); // Latitude range per tile
    const crs = "EPSG:3578";
    
    
    // Correct tile coordinate calculations for BBOX
    const west = -180 + x * tileWidth;
    const east = west + tileWidth;
    const north = 90 - y * tileHeight;
    const south = north - tileHeight;

    // Clamp values to avoid precision issues and ensure valid bounds
    const clampedWest = Math.max(-180, Math.min(180, west));
    const clampedEast = Math.max(-180, Math.min(180, east));
    const clampedNorth = Math.max(-90, Math.min(90, north));
    const clampedSouth = Math.max(-90, Math.min(90, south));

    // Construct the URL by replacing placeholders with computed values
    const url = this.url
      .replace("{west}", clampedWest.toFixed(6))
      .replace("{south}", clampedSouth.toFixed(6))
      .replace("{east}", clampedEast.toFixed(6))
      .replace("{north}", clampedNorth.toFixed(6));

    console.log(`Fetching tile: ${url}`);

    const image = new Image();
    image.crossOrigin = "Anonymous";

    return new Promise((resolve, reject) => {
      image.onload = () => {
        try {
          this.applyCustomPalette(image);
          const processedImage = new Image();
          processedImage.src = this.canvas.toDataURL();
          processedImage.onload = () => resolve(processedImage);
        } catch (error) {
          console.error(`Error processing tile: ${url}`, error);
          resolve(null); // Gracefully handle errors
        }
      };

      image.onerror = (error) => {
        console.error(`Failed to fetch tile: ${url}`, error);
        resolve(null); // Gracefully handle errors
      };

      image.src = url;
    });
  }

  applyCustomPalette(image) {
    // Adjust the canvas size to match the image's aspect ratio
    this.canvas.width = image.width; // Keep the original width
    this.canvas.height = image.height; // Keep the original height
    this.ctx.drawImage(image, 0, 0, this.canvas.width, this.canvas.height);

    // Access pixel data
    const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
    const data = imageData.data;

    // Apply a grayscale palette or other custom transformation
    for (let i = 0; i < data.length; i += 4) {
      const r = data[i]; // Red channel
      const g = data[i + 1]; // Green channel
      const b = data[i + 2]; // Blue channel

      // Example: Apply grayscale palette
      const gray = Math.round((r + g + b) / 3);

      data[i] = gray; // Set red
      data[i + 1] = gray; // Set green
      data[i + 2] = gray; // Set blue
      // Alpha remains unchanged
    }

    // Update the canvas with the modified pixel data
    this.ctx.putImageData(imageData, 0, 0);
  }
}

// Add the custom imagery provider to the Cesium viewer
const customWmsProvider = new CustomPaletteImageryProvider({
  url: `https://pae-paha.pacioos.hawaii.edu/thredds/wms/dhw_5km?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&LAYERS=CRW_SST&STYLES=&FORMAT=image/png&TRANSPARENT=true&TILED=true&WIDTH=256&HEIGHT=256&SRS=EPSG:4326&BBOX={west},{south},{east},{north}`,
  //tileWidth: 256,
  //tileHeight: 256,
  minimumLevel: 0,
  maximumLevel: 10,
});

viewer.imageryLayers.addImageryProvider(customWmsProvider);