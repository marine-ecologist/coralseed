{"version":3,"file":"email-utils.js","sourceRoot":"","sources":["../../../src/parser/email-utils.ts"],"names":[],"mappings":";;;AAyBA,8DAEC;AAMD,oDAEC;AASD,oCAIC;AAhDD,0CAAoF;AACpF,yCAAyC;AAEzC;;GAEG;AACU,QAAA,oBAAoB,GAAG,WAAW,CAAC;AAEhD;;;GAGG;AACH,IAAM,uBAAuB,GAAG,IAAI,MAAM,CAAC,WAAI,wCAA4B,yBAAuB,CAAC,CAAC;AAEpG;;;;;;;;;;GAUG;AACH,SAAgB,yBAAyB,CAAC,IAAY;IAClD,OAAO,kCAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7C,CAAC;AAED;;;GAGG;AACH,SAAgB,oBAAoB,CAAC,IAAY;IAC7C,OAAO,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,YAAoB;IAC7C,IAAM,eAAe,GAAW,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;IAEpE,OAAO,IAAA,sBAAU,EAAC,eAAe,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import { alphaNumericAndMarksCharsStr, alphaNumericAndMarksRe } from '../regex-lib';\nimport { isKnownTld } from './uri-utils';\n\n/**\n * A regular expression to match a 'mailto:' prefix on an email address.\n */\nexport const mailtoSchemePrefixRe = /^mailto:/i;\n\n/**\n * Regular expression for all of the valid characters of the local part of an\n * email address.\n */\nconst emailLocalPartCharRegex = new RegExp(`[${alphaNumericAndMarksCharsStr}!#$%&'*+/=?^_\\`{|}~-]`);\n\n/**\n * Determines if the given character may start the \"local part\" of an email\n * address. The local part is the part to the left of the '@' sign.\n *\n * Technically according to the email spec, any of the characters in the\n * {@link emailLocalPartCharRegex} can start an email address (including any of\n * the special characters), but this is so rare in the wild and the\n * implementation is much simpler by only starting an email address with a word\n * character. This is especially important when matching the '{' character which\n * generally starts a brace that isn't part of the email address.\n */\nexport function isEmailLocalPartStartChar(char: string): boolean {\n    return alphaNumericAndMarksRe.test(char);\n}\n\n/**\n * Determines if the given character can be part of the \"local part\" of an email\n * address. The local part is the part to the left of the '@' sign.\n */\nexport function isEmailLocalPartChar(char: string): boolean {\n    return emailLocalPartCharRegex.test(char);\n}\n\n/**\n * Determines if the given email address is valid. We consider it valid if it\n * has a valid TLD in its host.\n *\n * @param emailAddress email address\n * @return true is email have valid TLD, false otherwise\n */\nexport function isValidEmail(emailAddress: string): boolean {\n    const emailAddressTld: string = emailAddress.split('.').pop() || '';\n\n    return isKnownTld(emailAddressTld);\n}\n"]}