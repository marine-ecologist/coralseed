{"version":3,"file":"truncate-smart.js","sourceRoot":"","sources":["../../../src/truncate/truncate-smart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Date: 2015-10-05\n * Author: Kasper SÃ¸fren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed at a section within\n * the URL making it still somewhat human readable.\n *\n * @param {String} url\t\t\t\t\t\t A URL.\n * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n * @return {String} The truncated URL.\n */\nexport function truncateSmart(url: string, truncateLen: number, ellipsisChars?: string) {\n    let ellipsisLengthBeforeParsing: number;\n    let ellipsisLength: number;\n\n    if (ellipsisChars == null) {\n        ellipsisChars = '&hellip;';\n        ellipsisLength = 3;\n        ellipsisLengthBeforeParsing = 8;\n    } else {\n        ellipsisLength = ellipsisChars.length;\n        ellipsisLengthBeforeParsing = ellipsisChars.length;\n    }\n\n    let parse_url = function (url: string) {\n        // Functionality inspired by PHP function of same name\n        let urlObj: UrlObject = {};\n        let urlSub = url;\n        let match = urlSub.match(/^([a-z]+):\\/\\//i);\n        if (match) {\n            urlObj.scheme = match[1];\n            urlSub = urlSub.substr(match[0].length);\n        }\n        match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n        if (match) {\n            urlObj.host = match[1];\n            urlSub = urlSub.substr(match[0].length);\n        }\n        match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n        if (match) {\n            urlObj.path = match[1];\n            urlSub = urlSub.substr(match[0].length);\n        }\n        match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n        if (match) {\n            urlObj.query = match[1];\n            urlSub = urlSub.substr(match[0].length);\n        }\n        match = urlSub.match(/^#(.*?)$/i);\n        if (match) {\n            urlObj.fragment = match[1];\n            //urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n        }\n        return urlObj;\n    };\n\n    let buildUrl = function (urlObj: UrlObject) {\n        let url = '';\n        if (urlObj.scheme && urlObj.host) {\n            url += urlObj.scheme + '://';\n        }\n        if (urlObj.host) {\n            url += urlObj.host;\n        }\n        if (urlObj.path) {\n            url += '/' + urlObj.path;\n        }\n        if (urlObj.query) {\n            url += '?' + urlObj.query;\n        }\n        if (urlObj.fragment) {\n            url += '#' + urlObj.fragment;\n        }\n        return url;\n    };\n\n    let buildSegment = function (segment: string, remainingAvailableLength: number) {\n        let remainingAvailableLengthHalf = remainingAvailableLength / 2,\n            startOffset = Math.ceil(remainingAvailableLengthHalf),\n            endOffset = -1 * Math.floor(remainingAvailableLengthHalf),\n            end = '';\n        if (endOffset < 0) {\n            end = segment.substr(endOffset);\n        }\n        return segment.substr(0, startOffset) + ellipsisChars + end;\n    };\n    if (url.length <= truncateLen) {\n        return url;\n    }\n    let availableLength = truncateLen - ellipsisLength;\n    let urlObj = parse_url(url);\n    // Clean up the URL\n    if (urlObj.query) {\n        let matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n        if (matchQuery) {\n            // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n            urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n            url = buildUrl(urlObj);\n        }\n    }\n    if (url.length <= truncateLen) {\n        return url;\n    }\n    if (urlObj.host) {\n        urlObj.host = urlObj.host.replace(/^www\\./, '');\n        url = buildUrl(urlObj);\n    }\n    if (url.length <= truncateLen) {\n        return url;\n    }\n    // Process and build the URL\n    let str = '';\n    if (urlObj.host) {\n        str += urlObj.host;\n    }\n    if (str.length >= availableLength) {\n        if ((urlObj.host as string).length == truncateLen) {\n            return (\n                (urlObj.host as string).substr(0, truncateLen - ellipsisLength) + ellipsisChars\n            ).substr(0, availableLength + ellipsisLengthBeforeParsing);\n        }\n        return buildSegment(str, availableLength).substr(\n            0,\n            availableLength + ellipsisLengthBeforeParsing\n        );\n    }\n    let pathAndQuery = '';\n    if (urlObj.path) {\n        pathAndQuery += '/' + urlObj.path;\n    }\n    if (urlObj.query) {\n        pathAndQuery += '?' + urlObj.query;\n    }\n    if (pathAndQuery) {\n        if ((str + pathAndQuery).length >= availableLength) {\n            if ((str + pathAndQuery).length == truncateLen) {\n                return (str + pathAndQuery).substr(0, truncateLen);\n            }\n            let remainingAvailableLength = availableLength - str.length;\n            return (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(\n                0,\n                availableLength + ellipsisLengthBeforeParsing\n            );\n        } else {\n            str += pathAndQuery;\n        }\n    }\n    if (urlObj.fragment) {\n        let fragment = '#' + urlObj.fragment;\n        if ((str + fragment).length >= availableLength) {\n            if ((str + fragment).length == truncateLen) {\n                return (str + fragment).substr(0, truncateLen);\n            }\n            let remainingAvailableLength2 = availableLength - str.length;\n            return (str + buildSegment(fragment, remainingAvailableLength2)).substr(\n                0,\n                availableLength + ellipsisLengthBeforeParsing\n            );\n        } else {\n            str += fragment;\n        }\n    }\n    if (urlObj.scheme && urlObj.host) {\n        let scheme = urlObj.scheme + '://';\n        if ((str + scheme).length < availableLength) {\n            return (scheme + str).substr(0, truncateLen);\n        }\n    }\n    if (str.length <= truncateLen) {\n        return str;\n    }\n    let end = '';\n    if (availableLength > 0) {\n        end = str.substr(-1 * Math.floor(availableLength / 2));\n    }\n    return (str.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(\n        0,\n        availableLength + ellipsisLengthBeforeParsing\n    );\n}\n\ninterface UrlObject {\n    scheme?: string;\n    host?: string;\n    path?: string;\n    query?: string;\n    fragment?: string;\n}\n"]}