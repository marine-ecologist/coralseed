[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 George Roff Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/01-coralseed-theory.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"1: Introduction and coralseed theory","text":"coralseed spatially explicit probabilistic model attempts quantify spatial footprint coral larval re-seeding restoration progjects. model based high-resolution oceanographic models (e.g. CONNIE) allow tracking individual particles following release space time. incorporating experimental data larval behaviour (competency, habitat specific substrate settlement preferences, swimming behaviour) settlement probability can modelled individually 105 - 106 larvae. temporal dispersal-competency model overlaid onto high-resolution habitat maps (Allen Coral Atlas) forming spatially-explicit probabilistic model settlement following release coral larvae. coralseed aims provide insight key knowledge gaps larval restoration: 1) larvae settle following release? 2) spatial footprint larval reseeding projects? 3) likely densities settled corals? 4) densities adult corals (~10cm size) produced reseeding located? varying initial model parameters (e.g. tidal currents, time release, larval competency, larval densities, location release sites), simulation modelling approach can used quantify likely spatial footprint expected settlement densities, allowing optimisation upscaling larval reseeding programs Great Barrier Reef elsewhere. coralseed model formed three main sections: Probabilistic model larval competency time: model parameterised fine-scale (hourly) data coral settlement wild-captured larvae cultured nGBR. proportion larvae settling time used create Bayesian probabilistic model coral settlement early time period following release (0-12hrs), simulating larval release reef substrates. Individual-based modelling larval competency dispersal models: model leverages high-resolution particle tracking model (CONNIE 3) simulates particle releases point-source larval re-seeding project Lizard Island (nGBR) 2022. model overlays temporal trajectories probabilistic settlement model spatial particle tracks determine likely settlement times across dispersal trajectories. Quantifying spatial mosaics coral settlement potential habitat maps: combining high-resolution satellite-derived maps coral habitats adjacent release sites (https://allencoralatlas.org) larval behaviour determined experimental results settlement preferences habitat electivity (e.g. reef crest, reef slope), coralseed creates spatially explicit predictions coral settlement across seascapes. full code data R coralseed v0.0.0.9 (mostly) complete explanation model functions. coralseed intended flexible terms parameterisation, can generalised beyond current implementation. document rmarkdown format (Show / Hide buttons code section expand code details. ### 1. Probabilistic models larval competency larval re-seeding programs, larvae cultured (either aquaculture facilities land within culture ponds sea) held reach optimal competency (usually determined either ) adding n larvae tile quantifying settlement 10-24hrs, ii) adding tiles culture ponds quantifying proportion larvae settle 24hrs. Competency assays repeated daily, larvae released onto reef 3-6 days peak competency (.e. highest number settled larvae) maximise impact larval reseeding. coralseed defines competency duration time release settlement (perspective larvae n days old following fertilisation). definition differs traditional studies larval competency (e.g. Heyward & Negri 1999, Connolly & Baird 2010) derive larval competency proportion n larvae settling 24hr period across multiple days. distinction important coralseed models competency continuous (.e. hourly measurements) individual-based measures within single cohort, traditional studies (dispersal models) define discrete (daily) measures across multiple cohorts. parameterise coralseed, ran several experiments SeaSims coral spawning nGBR 2022. experiments tracked settlement replicated cohorts larvae (n=100 per replicate) hourly timepoints (either 0 48hrs SeaSims 0-12hrs wild spawn). experiments, larvae released 1 litre aquaria preconditioned settlement tile substrate. coralseed v0.1 uses experimental results wild-captured coral larvae Lizard Island Dec 2022. Briefly, five replicate pre-conditioned tiles placed individual 1 litre -flow aquaria (left) simulate natural conditions, 100 larvae added container t0. Tiles imaged hourly following larval release using high-resolution camera (Sony a7R IV) -water probe lens (Laowa 24mm) t0-6 hrs ~t10 hrs. proportion larvae settling time quantified tracking individual settlement time (right).","code":""},{"path":"/articles/01-coralseed-theory.html","id":"experimental-results","dir":"Articles","previous_headings":"Introduction","what":"Experimental results","title":"1: Introduction and coralseed theory","text":"Quick summary key results: Initial settlement rapid slows around 2-3hrs. Settlement 10hrs averaged 10 - 30% Settlement increasing 6 10hr time points (.e. reached asymptote 10hrs) Predicted settlement densities 24hrs averaged ~ 0.9 settlers per cm2 available substrate Settlement densities similar field experiments 24hrs (~1.0 settlers per cm2) Lizard Island Dec 2022 100k larvae released 1.5 * 1.5m net enclosures reef. #### Probabilistic approach determining competency One approach modelling time-censored data survival analysis, explicitly considers time--event outcomes. Applying settlement experiment, survival analysis becomes “time--settlement” rather “time--death”. experimental time point can considered census 100-n larvae initial starting pool, individuals undergoing binary transition swimming larvae = “0” settled larvae = “1”. estimate probability settlement time, data fit Bayesian discrete-time survival model Weibull distribution, resulting posterior distributions shape scale accounts -replicate variability multilevel framework. survival model fit brms (see code details), scale shape parameters resampled posterior draws using scale = exp(mu) / gamma(1 + 1/k). Predictions time--competency individual estimated Weibull parameters (shape, scale) using rweibull function 10k posterior draws. plot shows model outputs: probability settlement initial release t12hrs. Thick black line represents median model output, thin lines represent 100 random draws posterior (highlighting variability predicted trajectories multilevel approach). Predictions time--settlement parameterising dispersal models (105 - 106 larvae) obtained draws posterior. figure () example 100 posterior draws representing probable time--settlement 100 individual (ordered) particle tracks median probability density function Weibull fit. simulated population n=100 larvae model proximates median fit, predicting 44% competence t12hrs (56% larvae remain incompetent state either settle later stage undergo mortality). dataset visualised (, figure b) 1-dimensional trajectories population 100 larvae, green points indicate release larvae t0, red points represent predicted competence time individual larvae. Transposing trajectories onto dispersal tracks, “competence” used context “competent able settle” rather “settled” trajectories used parameterise spatiotemporal trajectories transposing binary state (“competent” vs “competent”) particle tracks hydrodynamic models, rephrases question “larvae become competent?” “larvae space become competent time?”","code":""},{"path":"/articles/01-coralseed-theory.html","id":"individual-based-modelling-of-larval-dispersal-competency","dir":"Articles","previous_headings":"","what":"2. Individual-based modelling of larval dispersal-competency","title":"1: Introduction and coralseed theory","text":"coralseed code leans heavily sf/lwgeom processing data spatially mapping, tmap visualise data (updated v0.2 replaces tidyverse data.table speed things large datasets). following example based simulated larval release 1k particles 0-6 hour time window (15:00 21:00) Lizard Island, December 2021. First, model converts imports data sf series points individual particle track (id) 12 minute time-steps initial release: coralseed spatially interpolates particle 1 minute time-steps across trajectory randomly samples output Bayesian time--settlement model determine probabilistic competency point (time minutes following release) particle. points connected form paths particle id according competency state time (either incompetent competent). dispersal time since release (minutes) larval state 1000 individual larvae following release. spatial reference, “restoratation hectare” boundary (100m x 100m) overlaid centre release site (red box). quick check, number competent particles final timepoint dispersal model (6hrs) compared ) Bayesian survival model predictions b) raw experimental data:","code":"head(particle_points_json)"},{"path":"/articles/01-coralseed-theory.html","id":"spatial-probability-landscapes-of-coral-settlement","dir":"Articles","previous_headings":"","what":"3. Spatial probability landscapes of coral settlement","title":"1: Introduction and coralseed theory","text":"predict spatial patterns larval settlement, coralseed tracks particle paths across benthic substrates determine probability settlement based ) larval competency state, ii) habitat electivity (based substrate quality). coralseed uses Allen coral atlas base underlay habitat types, can parameterised basemap shp fles. Reef substrates available coral settlement determined benthic Coral Atlas maps excluding non-settleable substrates (microalgal mats, seagrass, sand) spatially joining settleable substrate (coral/algae rubble). iterations model can explicitly consider post-settlement survival rubble partitioning additional substrate factor, merged v0.1 simplicity. Settleable substrates delineated habitat types defined geomorphic Coral Atlas maps: Back Reef Slope • Sheltered Reef Slope • Plateau • Inner Reef Flat • Outer Reef Flat • Reef Slope • Reef Crest Shallow Lagoon Deep Lagoon habitats sediment dominated non-coral habitats excluded geomorphic habitat maps prior merging.","code":""},{"path":"/articles/01-coralseed-theory.html","id":"substrate-electivity-of-larval-settlement","dir":"Articles","previous_headings":"3. Spatial probability landscapes of coral settlement","what":"Substrate electivity of larval settlement","title":"1: Introduction and coralseed theory","text":"Corals exhibit substrate preferences settlement lab field experiments can used parameterise spatial maps settlement probability. initial parameterisation model, data available settlement tiles North Reef (Lizard Island) Reef Flat (2m depth), Reef Crest (2m depth) reef slope (4-8m depth) Baird Hughes 1998 Baird unpublished data: Based data, GBR publications (Harriot 1985, Mundy & Babcock 1998, Baird 2001, Baird et al 2003, Doropoulos et al 2015) subjective decisions, v0.1 coralseed parameterised according following settlement probabilities P=1 absolute settlement P=0 settlement: “Reef Crest” - high settlement probability (P = 0.9 ± 0.1) “Reef Slope” - high settlement probability (P = 0.9 ± 0.1) “Sheltered Reef Slope” - lower exposed habitats (P = 0.7 ± 0.1) “Back Reef Slope” - lower sheltered slope habitats (P = 0.6 ± 0.1) “Outer Reef Flat” - half settlement reef crest/slope (P = 0.45 ± 0.1) “Inner Reef Flat” - senescent habitat, low settlement potential (P = 0.3 ± 0.1) “Plateau” - deep (>10m) habitat, low probability settlement (P 0.2 ± 0.1) Habitat-specific settlement probabilities used parameterise spatial maps sampling normal distribution mean ± SE probability:","code":""},{"path":"/articles/01-coralseed-theory.html","id":"probabilistic-settlement-across-particle-paths","dir":"Articles","previous_headings":"3. Spatial probability landscapes of coral settlement","what":"Probabilistic settlement across particle paths","title":"1: Introduction and coralseed theory","text":"coralseed takes particle paths (Fig ) maps settlement probability id according habitats encountered along trajectory (Fig b).  Note isn’t probability settlement probability settlement larvae competent. get , coralseed combines probabilities get outcome particle (.e. single settlement point). competent particle passes suitable habitat settlement, coralseed calculates probability settlement time-step additive multiplicative: larvae probability settlement whether remain within habitat 5 minutes 30 minutes. Spatially, coralseed assigns larvae random point along path habitat settlement determined avoid immediate settlement boundaries suitable habitats. Typically, dispersal models include “halo” around reefs particles pass , larvae allocated reef. Spatially straightforward implement sf assigning spatial buffers around habitats greater settlement probability (e.g. “Reef Slope” habitats draw particles passing within 30m spatial distance). spatially realistic models approach problematic larvae can settle within spatial buffers outside actual habitat. v0.2 coralseed gets around issue using sf::st_snap “capture” particles pass habitats randomly assigning settlement within habitat, approach computationally expensive (iterates across points habitats) needs refining make workable. difficult parameterise, adding halos v0.2 increase likelihood settlement areas high retention updated. initial 1000 larvae released, 102 larvae reached competency settled substrates within 6hr window. map final settlement points prior trajectories overlaid 1 hectare settlement box:","code":""},{"path":"/articles/01-coralseed-theory.html","id":"spatial-patterns-of-settlement","dir":"Articles","previous_headings":"3. Spatial probability landscapes of coral settlement","what":"Spatial patterns of settlement","title":"1: Introduction and coralseed theory","text":"coralseed generates spatial grid outer boundaries settlement points according fixed grid-cell size (= 25m cells), calculates density larvae grid-cell:  Alternatively, coralseed can quantify settlement proportion initial larvae (finer 10m cellsize), % 1k initial larvae released dispersal model.","code":""},{"path":"/articles/01-coralseed-theory.html","id":"notes","dir":"Articles","previous_headings":"3. Spatial probability landscapes of coral settlement","what":"notes","title":"1: Introduction and coralseed theory","text":"implementation coralseed based 1k particles. run larger models, coralseed tested geojson files 100k particles. probabilities within model generated dynamically (competency, settlement probability), coralseed can run iteratively dataset 100k larvae different outcomes (.e. 50 loops across input 100k larvae generate different probabilities 5 million individuals, 50 per path).","code":""},{"path":"/articles/02-run-coralseed-instructions.html","id":"mermaid-bay-lizard-island","dir":"Articles","previous_headings":"","what":"Mermaid Bay, Lizard Island","title":"2. Instructions for running coralseed","text":"example running coralseed using dataset Mermaid Bay, Lizard Island (nGBR), December 2022. model simulates point source release 1000 particles 5*5m area within site tracks particles across 6.95hrs period.","code":""},{"path":"/articles/02-run-coralseed-instructions.html","id":"load-packages-and-set-seascape_probability","dir":"Articles","previous_headings":"","what":"1. Load packages and set seascape_probability","title":"2. Instructions for running coralseed","text":"First step generate probabilistic habitat map settlement. seascape_probability function takes two shp files inputs: 1) map reef substrates (merged classes “coral/algae”, “rubble”, “rock” Allan Coral Atlas Benthic classes), 2) map benthic habitat (e.g. “reef crest”, “reef slope” etc classes geomorphic Allan Coral Atlas maps). function generates probability mosaic settleable area (reef substrates) categorised habitat types. Example reef_outline habitat files included Lizard Island. change probabilities see ?settlement_probability.","code":"library(coralseed) library(ggplot2) library(tidyverse) library(sf)  seascape <- seascape_probability(reefoutline=reef_map, habitat=benthic_map)"},{"path":"/articles/02-run-coralseed-instructions.html","id":"seed-particles-based-on-dispersal-input","dir":"Articles","previous_headings":"","what":"2. Seed particles based on dispersal input","title":"2. Instructions for running coralseed","text":"second step simulate individual competency tracks particles/larvae, incorporate larval mortality, determine settlement probability particles/larvae pass reef habitats. seed_particles function taking input simulated particles, overlaying probability seascape generated step 1, uses predict_competency simulate_mortality quantify competency mortality respectively (see ?predict_competency ?simulate_mortality details). example uses one included simulated particle tracks (“Mermaid_PointSource_Bay_01”) input seascape probability (seascape) generated previous step track particles across ~7hr period (limit_time). Mortality set 10% (simulate.mortality) shape mortality curve (simulate.mortality) set “typeI”. Settlement probability particles passing substrates (probability) set “additive” (see ?settle_particles) details. seed_particles outputs summary statistics (set silent=FALSE) summary plots main outputs (competency, mortality, spatial pattern (cartesian) dispersaltime - set return.plot=TRUE visualise ). Try changing parameters visualising output. function returns sf output spatial points individual particle (id) 1 minute timesteps (dispersaltime) across trajectories details time minutes particle becomes competent (settlement_point), particle state (either 0 1) competency (incompetent competent), benthic habitat crosses point time (class), unique habitat identifier (habitat_id) settlement_probability habitat determined previous step, settlement_outcome (.e. particle competent probable settle?), finally outcome (.e. transition 0 1 final settlement point given particle).","code":"particles <- seed_particles(input=\"example-mermaid\", seascape=seascape,                             competency.function = \"exponential\",                             limit_time=6, simulate.mortality = \"typeI\",                              simulate.mortality.n = 0.1, probability=\"additive\",                             return.plot=TRUE)"},{"path":"/articles/02-run-coralseed-instructions.html","id":"settle-particles-based-on-benthic-habitats-and-probability","dir":"Articles","previous_headings":"","what":"3. Settle particles based on benthic habitats and probability","title":"2. Instructions for running coralseed","text":"settle_particles function takes input seed_particles determines along settlement track particle settles. ’s currently data larvae settle interact wild, function adds three different possibilities: “additive” (p=1 larvae competent, larvae settle somewhere habitat along particle trajectory), “lagged” (p=1 larvae competent, larvae settle somewhere habitat first 10 minutes, “rapid” (p=1 larvae competent, larvae settle immediately entering habitat. larvae competent settle somewhere habitat p=1. “rapid” produce unrealistic results larvae immediately settle borders habitats. “lagged” probably realistic, given habitats relatively small size (seascapes spatially complex) larvae pass habitats fairly rapidly, either “lagged” “additive” produce fairly realistic results.","code":"settlers <-  settle_particles(particles, probability=\"additive\", silent=TRUE)"},{"path":"/articles/02-run-coralseed-instructions.html","id":"map-the-output","dir":"Articles","previous_headings":"","what":"4. Map the output","title":"2. Instructions for running coralseed","text":"spatially map outputs, use map_coralseed function. map_coralseed takes outputs steps 1 (seascape_probability), step 2 (seed_particles), step 3 (settle_particles) inputs uses tmap library plot shp files, particle tracks, settlement points. restoration.plot function takes vector width length draws rectangular area centroid particle release.","code":""},{"path":"/articles/03-generating-summary-statistics.html","id":"summary-statistics-of-settlers","dir":"Articles","previous_headings":"","what":"Summary statistics of settlers","title":"3. Quantifying spatial footprints from coralseed outputs","text":"output coralseed can (settlement points particle paths) used quantify summary statistics spatial patterns, allowing comparisons sites tidal cycles/days/years. key questions stem larval restoration include: proportion larvae settled initial reseeding number? long average take larvae settle? (time minutes) far larvae travel settling? (distance metres) area larvae settle? (.e. restoration footprint km2?) mean density settlers? (individuals per 20m2) maximum density settlers? (individuals per 20m2) mean distance settlers? (distance metres) clustered larvae space? (nearest neighbour index - Clark Evans index) dispersed larvae? (sum squared distances around mean) example run realistic number larvae reseeding: 1 million larvae. parallel processing example, import 10,000 particle tracks iterate 100 simulations across particle track generate variance coralseed model. practice can number simulations number tracks depending compute time (warning: 1e-06 particles takes compute time, see tic() toc() times inset code M2 Max processor) example uses foreach %dopar% loops (see parallel processing examples) can also run nested forloop future_lapply() library(futures). Show Code output seed_futures (via settle_particles) sf format, output can converted ppp format using spatstat.geom::.ppp(sf::st_as_sf(outputfile)) leverage extensive spatstat package quantifying spatial point patterns (nndist nni included examples). examples interpret output coral_seed models:","code":"library(tidyverse) library(doParallel) library(foreach) library(sf) library(coralseed) # first set spatial mosaic of habitat preference via coralseed seascape <- coralseed::seascape_probability(reefoutline=reef_map, habitat=benthic_map)  library(tictoc) tic() # use n-1 cores ncores <- detectCores() cl <- makeCluster(ncores-1, port=12345, outfile=\"seed_futures_log.txt\") registerDoParallel(cl)  library(tidyverse) library(doParallel) library(foreach) library(sf) library(coralseed)  # load simimulation inputs palfrey01 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_10.json\" palfrey02 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_11.json\" palfrey03 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_12.json\" palfrey04 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_13.json\" palfrey05 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_14.json\" palfrey06 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_15.json\" palfrey07 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_16.json\" palfrey08 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_17.json\" palfrey09 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_18.json\" palfrey10 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_19.json\"  nsims_seed <- 100  palfrey01_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 )  palfrey02_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 )  palfrey03_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey04_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey05_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey06_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey07_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey08_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey09_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 ) palfrey10_parallel <- foreach(i = 1:nsims_seed, .packages = \"coralseed\") %dopar% seed_futures(   limit_time = 6.95, input = palfrey01,   set.centre = TRUE, seascape = seascape, tracks = TRUE, silent = TRUE,   competency.function = \"exponential\", limit.time = 6.95, probability = \"additive\",   simulate.mortality = \"typeI\", simulate.mortality.n = 0.1 )  stopCluster(cl)   palfrey <- c(palfrey01_parallel, palfrey02_parallel, palfrey03_parallel, palfrey04_parallel, palfrey05_parallel, palfrey06_parallel, palfrey07_parallel, palfrey08_parallel, palfrey09_parallel, palfrey10_parallel)  ### every set of dispersal simulations (n=1000) has 100 simulations.  palfrey_points <- extract_parallel(type = \"points\", palfrey) palfrey_paths <- extract_parallel(type = \"paths\", palfrey)  toc()"},{"path":"/articles/03-generating-summary-statistics.html","id":"what-proportion-of-larvae-settled","dir":"Articles","previous_headings":"","what":"1) What proportion of larvae settled?","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"paste0(nrow(palfrey_points), \" / 1,000,000 larvae settled\") summary.proportion <- palfrey_points |>   group_by(id) |>   dplyr::summarise(proportion = n() / 1000 * 100)  summary.proportion <- summary.proportion$proportion df_meanproportion <- data.frame(values = summary.proportion, factor = \"meantimetosettlement\") paste0(round(mean(summary.proportion),1), \"% settlement\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"how-long-on-average-do-larvae-take-to-settle","dir":"Articles","previous_headings":"","what":"2) How long on average do larvae take to settle?","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"settlement.time <- palfrey_points |>   group_by(id) |>   summarise(disp = mean(dispersaltime)) settlement.time <- settlement.time$disp df_meantime <- data.frame(values = settlement.time, factor = \"meantimetosettlement\") paste0(round(mean(settlement.time)/60,1), \" hours\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"how-far-on-average-did-larvae-travel-before-settling","dir":"Articles","previous_headings":"","what":"3) How far on average did larvae travel before settling?","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"# mean dispersal length per iter summary.dispersaldistances <- sapply(split(   palfrey_paths,   palfrey_paths$id ), function(sub_df) { # Applying function over each split   mean(sf::st_length(sub_df$geometry)) / 1000 }) df_meandistance <- data.frame(values = summary.dispersaldistances, factor = \"meandistancetosettlement\") paste0(round(mean(summary.dispersaldistances),2), \" kilometres\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"over-what-area-did-larvae-disperse-i-e--what-is-the-total-restoration-footprint","dir":"Articles","previous_headings":"","what":"4) Over what area did larvae disperse? (i.e. what is the total restoration footprint?)","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"summary.dispersal.area <- sapply(split(   palfrey_points,   palfrey_points$id ), function(sub_df) { # Applying function over each split   st_area(settlement_statistics(sub_df, cellsize = 20)$area) }) df_footprint <- data.frame(values = summary.dispersal.area, factor = \"spatialfootprint\")  paste0(round(mean(summary.dispersal.area)*0.0001,2), \" ha\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"what-is-the-mean-count-of-settlers-per-20m2","dir":"Articles","previous_headings":"","what":"5) what is the mean count of settlers (per 20m2)?","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"summary.dispersal.mean.count <- sapply(split(   palfrey_points,   palfrey_points$id ), function(sub_df) { # Applying function over each split   tmp <- (settlement_statistics(sub_df, cellsize = 20)$grid)   tmp$count[is.na(tmp$count)] <- 0   mean(tmp$count) }) df_meandensity <- data.frame(values = summary.dispersal.mean.count, factor = \"meandensity\") paste0(round(mean(summary.dispersal.mean.count)/20,2), \" settlers per m2\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"what-is-the-max-count-of-settlers-per-20m2","dir":"Articles","previous_headings":"","what":"6) what is the max count of settlers (per 20m2)?","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"summary.dispersal.max.count <- sapply(split(   palfrey_points,   palfrey_points$id ), function(sub_df) { # Applying function over each split   tmp <- (settlement_statistics(sub_df, cellsize = 20)$grid)   tmp$count[is.na(tmp$count)] <- 0   max(tmp$count) }) df_maxdensity <- data.frame(values = summary.dispersal.max.count, factor = \"maxdensity\") paste0(round(mean(summary.dispersal.max.count)/20,2), \" settlers per m2\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"how-clustered-are-the-larvae-how-close-are-the-nearest-neighbours-in-meters","dir":"Articles","previous_headings":"","what":"7) How clustered are the larvae? (how close are the nearest neighbours in meters?)","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"summary.nnd <- sapply(split(palfrey_points, palfrey_points$id), function(sub_df) { # Applying function over each split   mean(spatstat.geom::nndist(spatstat.geom::as.ppp(st_as_sf(select(sub_df, id))))) # nnd }) df_nnd <- data.frame(values = summary.nnd, factor = \"nnd\") paste0(round(mean(summary.nnd),2), \" metres\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"how-clustered-are-the-larvae-clark-evans-index-","dir":"Articles","previous_headings":"","what":"8) How clustered are the larvae? Clark-Evans Index.","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"summary.nni <- sapply(split(palfrey_points, palfrey_points$id), function(sub_df) { # Applying function over each split   points_ppp <- spatstat.geom::as.ppp(st_as_sf(select(sub_df, id))) # nnd   nn_distances <- spatstat.geom::nndist(points_ppp)   nn_mean <- mean(nn_distances)   nn_expected <- 0.5 / sqrt(points_ppp$n / spatstat.geom::area.owin(spatstat.geom::as.owin(points_ppp)))   nn_mean / nn_expected # nearest neighbour index }) df_nni <- data.frame(values = summary.nni, factor = \"nni\") paste0(round(mean(summary.nni),2), \" (<1 = clustering, >1 = dispersion)\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"how-dispersed-are-the-larvae-sum-of-squared-distances-around-the-mean","dir":"Articles","previous_headings":"","what":"9) How dispersed are the larvae? (sum of squared distances around the mean)","title":"3. Quantifying spatial footprints from coralseed outputs","text":"","code":"summary.dispersion <- sapply(   split(palfrey_points, palfrey_points$id),   function(sub_df) { # Applying function over each split     mean(calculate_dispersion(sub_df))   } ) df_dispersion <- data.frame(values = summary.dispersion, factor = \"dispersion\") paste0(round(mean(summary.dispersion),2), \" m2\")"},{"path":"/articles/03-generating-summary-statistics.html","id":"plot-all-outputs","dir":"Articles","previous_headings":"","what":"plot all outputs:","title":"3. Quantifying spatial footprints from coralseed outputs","text":"violin plots: ridge plots: map settlers visualise spatial footprint, use map_coralseed_future:","code":"df_all <- rbind(df_meanproportion, df_meantime, df_meandistance, df_footprint, df_meandensity, df_maxdensity, df_nnd, df_nni, df_dispersion) |> mutate(level = \"a\")  ggplot() +   theme_bw() +   ggtitle(\"Palfrey summary statistics\") +   facet_wrap(~factor, scales = \"free\") +   geom_violin(data = df_all, aes(     x = factor, y = values,     fill = factor   ), alpha = 0.8, show.legend = FALSE) +   ggbeeswarm::geom_quasirandom(     data = df_all, aes(x = factor, y = values),     alpha = 0.2, size = 0.2, show.legend = FALSE   ) ggplot() +   theme_bw() + ylab(\"\") + xlab(\"\") +   ggtitle(\"Palfrey summary ridges\") +   facet_wrap(~factor, scales = \"free\") +   ggridges::geom_density_ridges2(     data = df_all,     aes(x = values, y = 0, fill = factor), alpha = 0.8, show.legend = FALSE   ) map_coralseed_future(points=palfrey_points, paths=palfrey_paths,                seascape_probability=seascape, restoration.plot=c(100,100))"},{"path":"/articles/05-parallel-processing.html","id":"scaling-up-coralseed","dir":"Articles","previous_headings":"","what":"Scaling up coralseed","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"basic seed_particles function 1000 particles takes ~15-16 seconds 2019 Macbook Pro (6-core Intel Core i7) ~3-4 seconds 2023 Macbook Pro (M2 Max). bottleneck processing speed comes using sf functionality difficult improve R environment. seed_particles functions coralseed rely random draws Bayesian posteriors run simulate variance, iterating seed_particles improves model estimates incorporating variance. scale coralseed, input simulation can run multiple times (.e. 1000 particles input, results can run 100 times give 100,000 simulated particles). different approaches iterating across function R - either singularly (/foreach loops) vectorising (lapply), parallel (doparallel futures). speed results, running parallel reduces compute times. doParallel parallel backend foreach , using multicore functionality Unix-like systems snow functionality Windows. futures allows running functions (e.g. lapply) sequentially, parallel background sessions, forked multicore approaches options parallel approaches limited cross-platform availability - e.g. multicore available Windows operating system RStudio, raises issues cross-platform compatability code. optimisation seed_futures (stripped back function combining seed_particles settle_particles) comparing speed different approaches. code run MacOS 13.4 M2 Max processor, expect slower different machines/OS. > sessionInfo() R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) Running : macOS Ventura 13.4 approach imports single geojson simulation 1000 particles, repeats code x100 give 100,000 individual particles (.e. 100 simulated particles/settlers per track). library(tictoc) used time R code instance: First, load packages:","code":"#remotes::install_github(\"marine-ecologist/coralseed\",  lib = \"/Users/rof011/coralseed\") #remotes::install_github(\"marine-ecologist/coralseed\") #devtools::install(\"/Users/rof011/coralseed\", force=TRUE)  library(\"coralseed\") library(\"data.table\") library(\"foreach\") library(\"future.apply\") library(\"doParallel\") library(\"tictoc\") library(\"ggplot2\")"},{"path":"/articles/05-parallel-processing.html","id":"i-basic-example","dir":"Articles","previous_headings":"","what":"i) basic example","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"basic example using seed_futures across 1000 input particles","code":"palfrey01 <- \"/Users/rof011/Library/CloudStorage/OneDrive-CSIRO/Data - SeaSims/conniemodels/Dispersal_SettlementRate/lizard_del_14_1512_sim1/lizard_del_14_1512_sim1/plots/day_12036/run_day_12036_lizard_del_14_1512_sim1_10.json\"  # spatial mosaic of habitat preference seascape <- coralseed::seascape_probability(reefoutline=reef_map, habitat=benthic_map)  tic() tmp <- seed_futures(input=palfrey01, limit_time=6.95, seascape=seascape,  silent=TRUE, set.seed=NULL,                     tracks=TRUE, competency.function = \"exponential\", limit.time = 6.95, probability=\"additive\",                     simulate.mortality = \"typeI\", simulate.mortality.n = 0.1) toc()"},{"path":"/articles/05-parallel-processing.html","id":"ii-do-and-foreach","dir":"Articles","previous_headings":"","what":"ii) %do% and foreach()","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"use foreach %% loop function 100 times","code":"tic() tmp <- foreach(i=1:100, .packages=\"coralseed\") %do%  seed_futures(limit_time=6.95, input=palfrey01,                       set.centre = TRUE, seascape=seascape,  tracks=TRUE, silent=TRUE, set.seed=NULL,                     competency.function = \"exponential\", limit.time = 6.95, probability=\"additive\",                      simulate.mortality = \"typeI\", simulate.mortality.n = 0.1) time_foreach <- toc()"},{"path":"/articles/05-parallel-processing.html","id":"iii-doparallel-and-foreach","dir":"Articles","previous_headings":"","what":"iii) %doparallel% and foreach()","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"use foreach %doparallel% loop function 100 times parallel across 11 (n-1) cores (OS system dependent)","code":"ncores <- detectCores() cl <- makeCluster(ncores-1) registerDoParallel(cl)  tic() tmp <- foreach(i=1:100, .packages=\"coralseed\") %dopar% seed_futures(limit_time=6.95, input=palfrey01,                       set.centre = TRUE, seascape=seascape,  tracks=TRUE, silent=TRUE,                      competency.function = \"exponential\", limit.time = 6.95, probability=\"additive\",                      simulate.mortality = \"typeI\", simulate.mortality.n = 0.1) time_foreach_parallel <- toc() stopCluster(cl)"},{"path":"/articles/05-parallel-processing.html","id":"iv-future_lapply-sequential","dir":"Articles","previous_headings":"","what":"iv) future_lapply ‘sequential’","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"use future_lapply future.apply package sequential processing. lapply applies function list/vector run 100 times (one another).","code":"iters=100  ###### futures sequential  plan(sequential) tic()  m1 <- future_lapply(rep(palfrey01,iters), seed_futures, future.seed = NULL,  seascape=seascape,                      limit_time=6.95, set.centre = TRUE, tracks=TRUE, silent=TRUE, set.seed=NULL,                    competency.function = \"exponential\", limit.time = 6.95, probability=\"additive\",                    simulate.mortality = \"typeI\", simulate.mortality.n = 0.1)  time_futures <- toc()"},{"path":"/articles/05-parallel-processing.html","id":"v-future_lapply-multisession","dir":"Articles","previous_headings":"","what":"v) future_lapply ‘multisession’","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"use future_lapply future.apply package. lapply applies function list/vector, input file palfrey01 replicated n times (iters) background R sessions","code":"iters=100  tic() plan(multisession, workers = iters) m1 <- future_lapply(rep(palfrey01,iters), seed_futures, future.seed = NULL,  seascape=seascape,                      limit_time=6.95, set.centre = TRUE, tracks=TRUE, silent=TRUE, set.seed=NULL,                    competency.function = \"exponential\", limit.time = 6.95, probability=\"additive\",                    simulate.mortality = \"typeI\", simulate.mortality.n = 0.1) time_futures_multisession <- toc() plan(sequential)"},{"path":"/articles/05-parallel-processing.html","id":"vi-future_lapply-multicore","dir":"Articles","previous_headings":"","what":"vi) future_lapply ‘multicore’","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"Use future_lapply future.apply package. Note - forked processing (‘multicore’) supported running seed_futures RStudio.","code":"iters=100 plan(multicore, workers = iters) # n input files needs to equal n workers tic() m1 <- future_lapply(rep(palfrey01,iters), seed_futures, future.seed = NULL, set.seed=NULL, seascape=seascape,                    limit_time=6.95, set.centre = TRUE, tracks=TRUE, silent=TRUE, set.seed=NULL,                    competency.function = \"exponential\", limit.time = 6.95, probability=\"additive\",                    simulate.mortality = \"typeI\", simulate.mortality.n = 0.1) time_futures_multicore <- toc() plan(sequential)"},{"path":"/articles/05-parallel-processing.html","id":"compare-results","dir":"Articles","previous_headings":"","what":"Compare results","title":"5. Parallel / multicore processing coralseed for large dispersal inputs","text":"output simulations. Parallel processing substantially speeds processing time, %dopar%'  returning marginally faster result thanfuture_lapply”:","code":"timetests <- data.frame(functions=c(\"foreach\", \"foreach_parallel\", \"futures_sequential\", \"futures_multisession\", \"futures_multicore\"),   time=c(as.numeric((time_foreach$toc-time_foreach$tic)),     as.numeric((time_foreach_parallel$toc-time_foreach_parallel$tic)),     as.numeric((time_futures$toc-time_futures$tic)),     as.numeric((time_futures_multisession$toc-time_futures_multisession$tic)),     as.numeric((time_futures_multicore))))  timetests$functions <- factor(timetests$functions, levels = timetests$functions)  ggplot() + theme_bw() +   xlab(\"function\") + ylab(\"time taken (mins)\") +   geom_bar(data=timetests, aes(functions, time/60, fill=functions), color=\"black\", stat = \"identity\", show.legend=FALSE)"},{"path":"/articles/06-posterior-variance-checks.html","id":"brms-models-in-coralseed-0-2-0","dir":"Articles","previous_headings":"","what":"brms models in coralseed 0.2.0","title":"6. Posterior variance checks (dispersal & coralseed models)","text":"Weibull model fit brms scale shape parameters resampled 10k posterior draws using S(t) = exp[-(t/λ)^k]. Predictions time--competency individual estimated Weibull parameters (shape, scale) using rweibull function 10k posterior draws. exponential model fit brms b_intercept resampled 10k posterior draws using S(t) = exp(-λ * t). Predictions time--competency individual estimated Weibull parameters (shape, scale) using `rexp`` function 10k posterior draws.","code":""},{"path":"/articles/06-posterior-variance-checks.html","id":"weibull","dir":"Articles","previous_headings":"","what":"1. Weibull","title":"6. Posterior variance checks (dispersal & coralseed models)","text":"rweibull used calculate time--event n_id = 1000 individual particles providing random values uniform distribution nsims = 1000. black line single random subsample nsims.","code":"library(coralseed) library(foreach) library(tidyverse)  nsims <- 1000 # number of simulations n_id <- 1000 # number of larvae    predict_weibull <- foreach(i=1:nsims, .combine=\"rbind\") %do% {       post_sm1_sample <- coralseed::parameter_draws_weibull %>% slice_sample(n = 1)       individual_times <- rweibull(runif(1000), shape = post_sm1_sample[1,2], scale = post_sm1_sample[1,1])        data.frame(settlement_point=sort(round(individual_times)), id=(n_id)-seq(0,n_id-1,1), sim=(i))     }    simulated_settlers_weibull <- predict_weibull |>   filter(sim %in% sample(1:nsims, 1)) |>   select(-sim)  ggplot() +   theme_bw() +   ggtitle(\"Predicted competency (n=1000) weibull distribution)\") +   xlim(0, 720 / 60) +   geom_point(data = predict_weibull, aes(settlement_point / 60, id, group = sim, color=sim), show.legend=FALSE, size = 0.2, alpha = 0.2) +   geom_point(data = simulated_settlers_weibull, aes(settlement_point / 60, id), colour = \"black\", size = 1.5, alpha = 1) +   xlab(\"Timing of competency (hrs)\") +   ylab(\"Individual\") +   scale_color_viridis_c(option=\"mako\")"},{"path":"/articles/06-posterior-variance-checks.html","id":"lognormal","dir":"Articles","previous_headings":"","what":"2. Lognormal","title":"6. Posterior variance checks (dispersal & coralseed models)","text":"lognormal","code":"nsims <- 1000 # number of simulations n_id <- 1000 # number of larvae    predict_lognormal <- foreach(i=1:nsims, .combine=\"rbind\") %do% {        post_sm1_sample_lognormal <- coralseed::parameter_draws_log %>% slice_sample(n = 1)       individual_times <- rlnorm(runif(n_id), meanlog=post_sm1_sample_lognormal[1,1], sdlog=post_sm1_sample_lognormal[1,2])        data.frame(settlement_point=sort(round(individual_times)), id=999-seq(0,999,1), sim=(i))   }    simulated_settlers_weibull <- predict_lognormal |>   filter(sim %in% sample(1:nsims, 1)) |>   select(-sim)  ggplot() +   theme_bw() +   ggtitle(\"Predicted competency (n=1000) lognormal distribution)\") +   xlim(0, 720 / 60) +   geom_point(data = predict_lognormal, aes(settlement_point / 60, id, group = sim, color=sim), show.legend=FALSE, size = 0.2, alpha = 0.2) +   geom_point(data = simulated_settlers_weibull, aes(settlement_point / 60, id), colour = \"black\", size = 1.5, alpha = 1) +   xlab(\"Timing of competency (hrs)\") +   ylab(\"Individual\") +   scale_color_viridis_c(option=\"plasma\")"},{"path":"/articles/06-posterior-variance-checks.html","id":"exponential","dir":"Articles","previous_headings":"","what":"3. Exponential","title":"6. Posterior variance checks (dispersal & coralseed models)","text":"exponential:","code":"nsims <- 1000 # number of simulations n_id <- 1000 # number of larvae    predict_exp <- foreach(i=1:nsims, .combine=\"rbind\") %do% {       post_sm1_sample_exp <- coralseed::parameter_draws_exp %>% slice_sample(n = 1)       individual_times <- rexp(runif(n_id), rate = 1/(exp(post_sm1_sample_exp[1,1])))        data.frame(settlement_point=sort(round(individual_times)), id=(n_id)-seq(0,n_id-1,1), sim=(i))     }    simulated_settlers_exp <- predict_exp |>   filter(sim %in% sample(1:nsims, 1)) |>   select(-sim)  ggplot() +   theme_bw() +   ggtitle(\"Predicted competency (n=1000) Exponential distribution)\") +   xlim(0, 720 / 60) +   geom_point(data = predict_exp, aes(settlement_point / 60, id, group = sim, color=sim), show.legend=FALSE, size = 0.2, alpha = 0.2) +   geom_point(data = simulated_settlers_exp, aes(settlement_point / 60, id), colour = \"black\", size = 1.5, alpha = 1) +   xlab(\"Timing of competency (hrs)\") +   ylab(\"Individual\") +   scale_color_viridis_c(option=\"viridis\")"},{"path":"/articles/06-posterior-variance-checks.html","id":"full-time-sequence","dir":"Articles","previous_headings":"","what":"full time sequence","title":"6. Posterior variance checks (dispersal & coralseed models)","text":"","code":"weibull_plot <- ggplot() +   theme_bw() +   ggtitle(\"Weibull\") +   #xlim(0, 720 / 60) +   geom_point(data = predict_weibull, aes(settlement_point / 60, id, group = sim, color=sim), show.legend=FALSE, size = 0.2, alpha = 0.2) +   geom_point(data = simulated_settlers_weibull, aes(settlement_point / 60, id), colour = \"black\", size = 1.5, alpha = 1) +   xlab(\"Timing of competency (hrs)\") +   ylab(\"Individual\") +   scale_color_viridis_c(option=\"mako\")   exponential_plot <- ggplot() +   theme_bw() +   ggtitle(\"Exponential\") +   #xlim(0, 720 / 60) +   geom_point(data = predict_exp, aes(settlement_point / 60, id, group = sim, color=sim), show.legend=FALSE, size = 0.2, alpha = 0.2) +   geom_point(data = simulated_settlers_exp, aes(settlement_point / 60, id), colour = \"black\", size = 1.5, alpha = 1) +   xlab(\"Timing of competency (hrs)\") +   ylab(\"Individual\") +   scale_color_viridis_c(option=\"viridis\")  lognormal_plot <- ggplot() +   theme_bw() +   ggtitle(\"Lognormal\") +  # xlim(0, 720 / 60) +   geom_point(data = predict_exp, aes(settlement_point / 60, id, group = sim, color=sim), show.legend=FALSE, size = 0.2, alpha = 0.2) +   geom_point(data = simulated_settlers_exp, aes(settlement_point / 60, id), colour = \"black\", size = 1.5, alpha = 1) +   xlab(\"Timing of competency (hrs)\") +   ylab(\"Individual\") +   scale_color_viridis_c(option=\"viridis\")   library(ggpubr)  ggarrange(weibull_plot, lognormal_plot, exponential_plot, ncol=1)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"George Roff. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Roff G (2023). coralseed: Spatially explicit probabilistic modelling coral settlement. R package version 0.1.0, https://marine-ecologist.github.io/coralseed/.","code":"@Manual{,   title = {coralseed: Spatially explicit probabilistic modelling of coral settlement},   author = {George Roff},   year = {2023},   note = {R package version 0.1.0},   url = {https://marine-ecologist.github.io/coralseed/}, }"},{"path":"/index.html","id":"coralseed","dir":"","previous_headings":"","what":"Spatially explicit probabilistic modelling of coral settlement","title":"Spatially explicit probabilistic modelling of coral settlement","text":"coralseed spatially explicit probabilistic model aims quantify spatial footprint coral larval re-seeding restoration progjects. model based input high-resolution oceanographic models (CONNIE) tracking individual particles space time. parameterising larval behaviour (competency, habitat specific substrate settlement preferences, swimming behaviour) individual-based probability settlement can modelled 105 - 107 larvae. Individual-based settlement probability dispersal paths overlaid onto high-resolution habitat maps (Allen Coral Atlas) form spatially-explicit model settlement following release coral larvae. coralseed aims provide insight key knowledge gaps larval restoration: 1) larvae settle following release? 2) spatial footprint larval reseeding projects? 3) likely densities settled corals? 4) densities adult corals (~10cm size) produced reseeding located? varying initial model parameters (e.g. tidal currents, time release, larval competency, larval densities, location release sites), simulation modelling approach can used quantify likely spatial footprint expected settlement densities, allowing optimisation upscaling larval reseeding programs Great Barrier Reef elsewhere.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatially explicit probabilistic modelling of coral settlement","text":"coralseed can installed github","code":"#install.packages(\"remotes\") install_github(\"marine-ecologist/coralseed\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Spatially explicit probabilistic modelling of coral settlement","text":"coralseed pre-loaded five point-source dispersal scenarios Lizard Island (northern Great Barrier Reef) December 2022. 1000 simulated particles released 25m square 3m depth 1.5 hours high tide simulation (14:00hrs). base paramaterisation coralseed across 6.95hr time period (limit_time) exponential time--settlement model parameterisation (competency.function) type mortality curve (simulate.mortality) applied 10% population 24 hr period (simulate.mortality.n) additive settlement function (probability).","code":"#devtools::install_github(\"marine-ecologist/coralseed\",  lib = \"/Users/rof011/coralseed\") devtools::document(\"/Users/rof011/coralseed\")  library(coralseed) library(ggplot2) library(tidyverse) library(sf)  ## 1. simulate settlement probabilities from habitat maps # `seascape_probability` takes coral atlas inputs and a data.frame of settlement # probability (mean, se) to simulate probability of settlement in habitats surrounding the release area  seascape <- seascape_probability(reefoutline=reef_map, habitat=benthic_map)  ## 2. seed particles from dispersal model and simulate competency # `seed_particles` outputs summary statistics and a four panel diagnostic plot  particles <- seed_particles(input=\"Mermaid_PointSource_Bay_01\", seascape=seascape,                             limit_time=6.95, competency.function = \"exponential\",                              limit.time = 720, simulate.mortality = \"typeI\",                              simulate.mortality.n = 0.1, probability=\"additive\",                             return.plot=TRUE)  ## 3. simulate settlement of particles # `settle_particles` then applies probability across the seascape to simulate spatially # explicit patterns of settlement across the seascape:  settlers <-  settle_particles(particles, probability=\"additive\")# %>% with(points)  ## 4. Map combined coralseed outputs # `map_coralseed` visualises all outputs from the above three models  map_coralseed(seed_particles=particles, settle_particles=settlers, seascape_probability=seascape, restoration.plot=c(100,100))"},{"path":"/reference/calculate_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dispersion — calculate_dispersion","title":"Calculate dispersion — calculate_dispersion","text":"Function calculate dispersion settled points","code":""},{"path":"/reference/calculate_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dispersion — calculate_dispersion","text":"","code":"calculate_dispersion(input)"},{"path":"/reference/calculate_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dispersion — calculate_dispersion","text":"input sf POINTS file (defaults NULL)","code":""},{"path":"/reference/calculate_dispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate dispersion — calculate_dispersion","text":"dispersion = standard deviation distances point centroid points","code":""},{"path":"/reference/coralseed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coralseed: Spatially explicit probabilistic modelling of coral settlement — coralseed-package","title":"coralseed: Spatially explicit probabilistic modelling of coral settlement — coralseed-package","text":"coralseed: spatially explicit reef-scale model coral settlement following larval reseeding","code":""},{"path":[]},{"path":"/reference/coralseed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coralseed: Spatially explicit probabilistic modelling of coral settlement — coralseed-package","text":"Maintainer: George Roff george.roff@csiro.au","code":""},{"path":"/reference/detachAllPackages.html","id":null,"dir":"Reference","previous_headings":"","what":"detachAllPackages — detachAllPackages","title":"detachAllPackages — detachAllPackages","text":"Function detach loaded packages","code":""},{"path":"/reference/detachAllPackages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detachAllPackages — detachAllPackages","text":"","code":"detachAllPackages()"},{"path":"/reference/extract_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Settlement statistics — extract_parallel","title":"Settlement statistics — extract_parallel","text":"Function extract points paths multiple %dopar% outputs Function quickly map settlers","code":""},{"path":"/reference/extract_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Settlement statistics — extract_parallel","text":"","code":"extract_parallel(input, type, ...)  map_coralseed(   seed_particles = particles,   settle_particles = settlers,   seascape_probability = seascape,   restoration.plot = c(100, 100),   show.tracks = TRUE )"},{"path":"/reference/extract_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Settlement statistics — extract_parallel","text":"input list %dopar% outputs type either points paths ... pass arguments seed_particles input seed_particles settle_particles input settle_particles seascape_probability input seascape_probability restoration.plot dimensions restoration plot metres show.tracks option show particle tracks (TRUE, large files slower renders) without tracks (FALSE, smaller files faster renders)","code":""},{"path":"/reference/ggplot_silent.html","id":null,"dir":"Reference","previous_headings":"","what":"Silence ggplot warnings — ggplot_silent","title":"Silence ggplot warnings — ggplot_silent","text":"replacement ggplot() call mutes warnings","code":""},{"path":"/reference/ggplot_silent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silence ggplot warnings — ggplot_silent","text":"","code":"ggplot_silent(...)"},{"path":"/reference/ggplot_silent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silence ggplot warnings — ggplot_silent","text":"... arguments passed ggplot2:::print.ggplot()","code":""},{"path":"/reference/map_coralseed_future.html","id":null,"dir":"Reference","previous_headings":"","what":"Map coralseed settlers subfunction — map_coralseed_future","title":"Map coralseed settlers subfunction — map_coralseed_future","text":"Function quickly map settlers multiple","code":""},{"path":"/reference/map_coralseed_future.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map coralseed settlers subfunction — map_coralseed_future","text":"","code":"map_coralseed_future(   points = points,   paths = paths,   seascape_probability = seascape,   restoration.plot = c(100, 100) )"},{"path":"/reference/map_coralseed_future.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map coralseed settlers subfunction — map_coralseed_future","text":"seascape_probability input seascape_probability restoration.plot dimensions restoration plot metres seed_particles input seed_particles settle_particles input settle_particles","code":""},{"path":"/reference/particle_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Particle distances — particle_distances","title":"Particle distances — particle_distances","text":"Function calculate distances particles timepoint limit particle distances tmax (minutes, e.g. 60 1hr) returns either  \"sf\" (\"MULTILINGSTRING\" id) \"df\" (data.frame total length id) depending type=\"df\" type=\"sf\"","code":""},{"path":"/reference/particle_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particle distances — particle_distances","text":"","code":"particle_distances(input = NULL, tmax = NULL, type = \"df\")"},{"path":"/reference/particle_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particle distances — particle_distances","text":"input input (defaults NULL) tmax limit particle times less tmax type export format \"sf\" \"df\" (see ) ... pass arguments","code":""},{"path":"/reference/particles_to_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Particles to tracks — particles_to_tracks","title":"Particles to tracks — particles_to_tracks","text":"Function convert particles (sf points) tracks (sf linestrings, multilinestring)","code":""},{"path":"/reference/particles_to_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particles to tracks — particles_to_tracks","text":"","code":"particles_to_tracks(input = NULL, by = \"id\", type = \"MULTILINESTRING\")"},{"path":"/reference/particles_to_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particles to tracks — particles_to_tracks","text":"input input (defaults NULL)","code":""},{"path":"/reference/particles_to_tracks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Particles to tracks — particles_to_tracks","text":"note: GEOS throws error n points less 3. using argument function drops levels less 3. issue mapping removes late competency particles, check careful converting factors paths: https://gis.stackexchange.com/questions/447578/geosexception-illegalargumentexception-point-array-must-contain-0--1-elemen !!sym()","code":""},{"path":"/reference/particles_to_tracks2.html","id":null,"dir":"Reference","previous_headings":"","what":"Particles to tracks — particles_to_tracks2","title":"Particles to tracks — particles_to_tracks2","text":"Function convert particles (sf points) tracks (sf linestrings, multilinestring)","code":""},{"path":"/reference/particles_to_tracks2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particles to tracks — particles_to_tracks2","text":"","code":"particles_to_tracks2(input = NULL, slicesample = 100, by = \"competency\")"},{"path":"/reference/particles_to_tracks2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particles to tracks — particles_to_tracks2","text":"input input (defaults NULL)","code":""},{"path":"/reference/particles_to_tracks2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Particles to tracks — particles_to_tracks2","text":"note: GEOS throws error n points less 3. using argument function drops levels less 3. issue mapping removes late competency particles, check careful converting factors paths: https://gis.stackexchange.com/questions/447578/geosexception-illegalargumentexception-point-array-must-contain-0--1-elemen !!sym()","code":""},{"path":"/reference/particles_to_tracks3.html","id":null,"dir":"Reference","previous_headings":"","what":"Particles to tracks v3.0 — particles_to_tracks3","title":"Particles to tracks v3.0 — particles_to_tracks3","text":"Function convert particles (sf points) tracks (sf linestrings, multilinestring)","code":""},{"path":"/reference/particles_to_tracks3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particles to tracks v3.0 — particles_to_tracks3","text":"","code":"particles_to_tracks3(input = NULL, by = \"competency\", multilinestring = TRUE)"},{"path":"/reference/particles_to_tracks3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particles to tracks v3.0 — particles_to_tracks3","text":"input input (defaults NULL)","code":""},{"path":"/reference/particles_to_tracks3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Particles to tracks v3.0 — particles_to_tracks3","text":"Avoids issue : note: GEOS throws error n points less 3. using argument function drops levels less 3. issue mapping removes late competency particles, check careful converting factors paths: https://gis.stackexchange.com/questions/447578/geosexception-illegalargumentexception-point-array-must-contain-0--1-elemen !!sym()","code":""},{"path":"/reference/particles_to_tracks_linestring.html","id":null,"dir":"Reference","previous_headings":"","what":"Particles to tracks — particles_to_tracks_linestring","title":"Particles to tracks — particles_to_tracks_linestring","text":"Function convert particles (sf points) tracks (sf linestrings, multilinestring)","code":""},{"path":"/reference/particles_to_tracks_linestring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particles to tracks — particles_to_tracks_linestring","text":"","code":"particles_to_tracks_linestring(   input = NULL,   slicesample = 100,   by = \"competency\" )"},{"path":"/reference/particles_to_tracks_linestring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particles to tracks — particles_to_tracks_linestring","text":"input input (defaults NULL)","code":""},{"path":"/reference/particles_to_tracks_linestring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Particles to tracks — particles_to_tracks_linestring","text":"note: GEOS throws error n points less 3. using argument function drops levels less 3. issue mapping removes late competency particles, check careful converting factors paths: https://gis.stackexchange.com/questions/447578/geosexception-illegalargumentexception-point-array-must-contain-0--1-elemen !!sym()","code":""},{"path":"/reference/particles_to_tracks_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Particles to tracks v3.0 — particles_to_tracks_time","title":"Particles to tracks v3.0 — particles_to_tracks_time","text":"Function convert particles (sf points) tracks (sf linestrings, multilinestring)","code":""},{"path":"/reference/particles_to_tracks_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particles to tracks v3.0 — particles_to_tracks_time","text":"","code":"particles_to_tracks_time(   input = NULL,   by = \"competency\",   multilinestring = TRUE )"},{"path":"/reference/particles_to_tracks_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particles to tracks v3.0 — particles_to_tracks_time","text":"input input (defaults NULL)","code":""},{"path":"/reference/particles_to_tracks_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Particles to tracks v3.0 — particles_to_tracks_time","text":"Avoids issue : note: GEOS throws error n points less 3. using argument function drops levels less 3. issue mapping removes late competency particles, check careful converting factors paths: https://gis.stackexchange.com/questions/447578/geosexception-illegalargumentexception-point-array-must-contain-0--1-elemen !!sym()","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_particles.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot output from settle_particles — plot_particles","title":"Plot output from settle_particles — plot_particles","text":"Function plot output seed_particles base R quick cheks","code":""},{"path":"/reference/plot_particles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot output from settle_particles — plot_particles","text":"","code":"plot_particles(   input = NULL,   seascape = NULL,   parameter = \"all\",   pch = 16,   size = 0.5,   ... )"},{"path":"/reference/plot_particles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot output from settle_particles — plot_particles","text":"input input parameter parameter (column coralseed) pch pch size size ... passes functions habitatmap basemap seascape_probability palette one rainbow(n), heat.colors(n), terrain.colors(n), topo.colors(n), cm.colors(n)","code":""},{"path":"/reference/plot_particles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot output from settle_particles — plot_particles","text":"","code":"# example code # particles <- seed_particles(\"mermaid\", seascape=seascape, limit_time=720, competency.function = \"exponential\", simulate.mortality = \"typeI\", simulate.mortality.n = 0.1, probability=\"additive\",return.plot=FALSE, silent=TRUE) # plot_particles(particles)"},{"path":"/reference/plot_settlers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot output from settle_particles — plot_settlers","title":"Plot output from settle_particles — plot_settlers","text":"Function plot output seed_particles base R quick cheks","code":""},{"path":"/reference/plot_settlers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot output from settle_particles — plot_settlers","text":"","code":"plot_settlers(input = NULL, seascape = NULL, pch = 16, size = 0.5, ...)"},{"path":"/reference/plot_settlers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot output from settle_particles — plot_settlers","text":"input input pch pch size size ... passes functions parameter parameter (column coralseed) habitatmap basemap seascape_probability palette one rainbow(n), heat.colors(n), terrain.colors(n), topo.colors(n), cm.colors(n)","code":""},{"path":"/reference/plot_settlers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot output from settle_particles — plot_settlers","text":"","code":"# example code # particles <- seed_particles(\"mermaid\", seascape=seascape, limit_time=720, competency.function = \"exponential\", simulate.mortality = \"typeI\", simulate.mortality.n = 0.1, probability=\"additive\",return.plot=FALSE, silent=TRUE) # plot_particles(particles)"},{"path":"/reference/predict_competency.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict_competency — predict_competency","title":"Predict_competency — predict_competency","text":"Function generate probability distribution Allen Coral Atlas input files predict_competency(n_id=100, nsims=1000, competency.function=\"exponential\")","code":""},{"path":"/reference/predict_competency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict_competency — predict_competency","text":"","code":"predict_competency(   n_id,   n_sims = 1000,   competency.function = \"exponential\",   sort = TRUE,   set.seed = NULL,   return.plot = TRUE,   ... )"},{"path":"/reference/predict_competency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict_competency — predict_competency","text":"n_id input n_id (number particles) n_sims number sims randomised datasets (see plot traces) competency.function distribution, one \"weibull\", \"exponential\", \"lognormal\" sort sort output ID, otherwise FALSE randomly distribute set.seed set seed value, defaults NULL return.plot return output ... passes functions","code":""},{"path":"/reference/predict_competency2.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict_competency — predict_competency2","title":"Predict_competency — predict_competency2","text":"Function generate probability distribution Allen Coral Atlas input files","code":""},{"path":"/reference/predict_competency2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict_competency — predict_competency2","text":"","code":"predict_competency2(   n_id,   competency.function = \"exponential\",   sort = FALSE,   set.seed = NULL,   return.plot = TRUE,   ... )"},{"path":"/reference/predict_competency2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict_competency — predict_competency2","text":"n_id input n_id competency.function distribution, one \"weibull\", \"exp\", \"log\" sort sort output ID, otherwise FALSE randomly distribute set.seed set seed value, defaults NULL return.plot return output ... passes functions","code":""},{"path":"/reference/save2.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Save R Objects Without Overwriting the File — save2","title":"Safely Save R Objects Without Overwriting the File — save2","text":"Wraps save. file already exists, overwritten. message printed indicating whether file successfully written already existed.","code":""},{"path":"/reference/save2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Save R Objects Without Overwriting the File — save2","text":"","code":"save2(..., file = stop(\"'file' must be specified\"))"},{"path":"/reference/save2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Save R Objects Without Overwriting the File — save2","text":"... Data frame(s), object(s), arguments, passed save. Required. file Path/file name output. Required.","code":""},{"path":"/reference/save2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely Save R Objects Without Overwriting the File — save2","text":"code https://github.com/stopsack/khsmisc/blob/HEAD/R/datahandling.R","code":""},{"path":"/reference/seascape_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Seascape Probability — seascape_probability","title":"Seascape Probability — seascape_probability","text":"Function generate probability distribution Allen Coral Atlas input files","code":""},{"path":"/reference/seascape_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seascape Probability — seascape_probability","text":"","code":"seascape_probability(   reefoutline = NULL,   habitat = NULL,   probability = NULL,   ... )"},{"path":"/reference/seascape_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seascape Probability — seascape_probability","text":"reefoutline geojson shp files Coral Atlas benthic habitat maps reef outline probability habitat specific probabilities (mean SE) defined example . Defaults NULL parameterisation embedded function (see example ) ... passes functions geomorphic habitat shp files Coral Atlas geomorphic maps","code":""},{"path":"/reference/seed_futures.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed futures — seed_futures","title":"Seed futures — seed_futures","text":"Combined function seed particles without returning extra data","code":""},{"path":"/reference/seed_futures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed futures — seed_futures","text":"","code":"seed_futures(   input,   seascape = NULL,   simulate.mortality = \"none\",   simulate.mortality.n = 0.1,   competency.function = \"exp\",   limit.time = NA,   probability = \"additive\",   tracks = FALSE,   set.seed = NULL,   ... )"},{"path":"/reference/seed_futures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed futures — seed_futures","text":"input input seascape shp file inputs seascape_probability() simulate.mortality set mortality type via simulate_mortality() one \"typeI\",\"typeII\", \"typeIII\" (defaults \"none\") simulate.mortality.n set proportion corals kill 24hr period, 0 none, 1 100 (defaults 0.1 10%) competency.function set distribution define competency time--settlement model, one \"weibull\", \"exp\", \"log\" (defaults \"exp\") limit.time limit time series, example 720 limit settlement results 0-12hrs (defaults \"NA\") probability one \"additive\", \"rapid\", \"lagged\") tracks generate particle track outputs (multilinestrings) set.seed set seed consistent results (defaults NULL) ... passes functions","code":""},{"path":"/reference/seed_futures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seed futures — seed_futures","text":"seed_particles() uses predict_competency(), simulate_mortality()","code":""},{"path":"/reference/seed_particles.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed particles — seed_particles","title":"Seed particles — seed_particles","text":"Function seed particles","code":""},{"path":"/reference/seed_particles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed particles — seed_particles","text":"","code":"seed_particles(   input = NULL,   example = NULL,   seascape = NULL,   subsample = NULL,   simulate.mortality = \"none\",   simulate.mortality.n = 0.1,   competency.function = \"exp\",   limit.time = NA,   set.centre = TRUE,   set.seed = NULL,   silent = FALSE,   return.plot = FALSE,   ... )"},{"path":"/reference/seed_particles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed particles — seed_particles","text":"input input seascape shp file inputs seascape_probability() simulate.mortality set mortality type via simulate_mortality() one \"typeI\",\"typeII\", \"typeIII\" (defaults \"none\") simulate.mortality.n set proportion corals kill 24hr period, 0 none, 1 100 (defaults 0.1 10%) competency.function set distribution define competency time--settlement model, one \"weibull\", \"exp\", \"log\" (defaults \"exp\") limit.time limit time series, example 720 limit settlement results 0-12hrs (defaults \"NA\") set.centre reset CONNIE input central t0 point (defaults TRUE) set.seed set seed consistent results (defaults NULL) silent silence printing results running (defaults FALSE) return.plot return outputs seed_particles (defaults \"FALSE\") ... passes functions","code":""},{"path":"/reference/seed_particles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seed particles — seed_particles","text":"seed_particles() uses predict_competency(), simulate_mortality()","code":""},{"path":"/reference/seed_particles2.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed particles — seed_particles2","title":"Seed particles — seed_particles2","text":"Function seed particles","code":""},{"path":"/reference/seed_particles2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed particles — seed_particles2","text":"","code":"seed_particles2(input = NULL, ...)"},{"path":"/reference/seed_particles2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed particles — seed_particles2","text":"input input ... passes functions seascape shp file inputs seascape_probability() simulate.mortality set mortality type via simulate_mortality() one \"typeI\",\"typeII\", \"typeIII\" (defaults \"none\") simulate.mortality.n set proportion corals kill 24hr period, 0 none, 1 100 (defaults 0.1 10%) competency.function set distribution define competency time--settlement model, one \"weibull\", \"exp\", \"log\" (defaults \"exp\") limit.time limit time series, example 720 limit settlement results 0-12hrs (defaults \"NA\") set.centre reset CONNIE input central t0 point (defaults TRUE) silent silence printing results running (defaults FALSE) set.seed set seed consistent results (defaults NULL) return.plot return outputs seed_particles (defaults \"FALSE\")","code":""},{"path":"/reference/seed_particles2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seed particles — seed_particles2","text":"seed_particles() uses predict_competency(), simulate_mortality()","code":""},{"path":"/reference/seed_settle_particles.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed and settle particles — seed_settle_particles","title":"Seed and settle particles — seed_settle_particles","text":"Combined function seed particles without returning extra data","code":""},{"path":"/reference/seed_settle_particles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed and settle particles — seed_settle_particles","text":"","code":"seed_settle_particles(   input,   seascape = NULL,   simulate.mortality = \"none\",   simulate.mortality.n = 0.1,   competency.function = \"exp\",   limit.time = NA,   probability = \"additive\",   set.centre = TRUE,   set.seed = NULL,   silent = FALSE,   return.plot = FALSE,   ... )"},{"path":"/reference/seed_settle_particles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed and settle particles — seed_settle_particles","text":"input input seascape shp file inputs seascape_probability() simulate.mortality set mortality type via simulate_mortality() one \"typeI\",\"typeII\", \"typeIII\" (defaults \"none\") simulate.mortality.n set proportion corals kill 24hr period, 0 none, 1 100 (defaults 0.1 10%) competency.function set distribution define competency time--settlement model, one \"weibull\", \"exp\", \"log\" (defaults \"exp\") limit.time limit time series, example 720 limit settlement results 0-12hrs (defaults \"NA\") probability one \"additive\", \"rapid\", \"lagged\") set.centre reset CONNIE input central t0 point (defaults TRUE) set.seed set seed consistent results (defaults NULL) silent silence printing results running (defaults FALSE) return.plot return outputs seed_particles (defaults \"FALSE\") ... passes functions","code":""},{"path":"/reference/seed_settle_particles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seed and settle particles — seed_settle_particles","text":"seed_particles() uses predict_competency(), simulate_mortality()","code":""},{"path":"/reference/set_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set buffer — set_buffer","title":"Set buffer — set_buffer","text":"Function generate sf file bounding box. Used tmap visualisations","code":""},{"path":"/reference/set_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set buffer — set_buffer","text":"","code":"set_buffer(input = NULL, buffer = 150)"},{"path":"/reference/set_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set buffer — set_buffer","text":"input input (defaults NULL) buffer distance surrounding particle boundary (defaults 250m)","code":""},{"path":"/reference/set_restoration_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Set restoration plot — set_restoration_plot","title":"Set restoration plot — set_restoration_plot","text":"Function create rectangular polygon around release point (centroid t0 particle release) plotting tmap","code":""},{"path":"/reference/set_restoration_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set restoration plot — set_restoration_plot","text":"","code":"set_restoration_plot(input = NULL, width = NULL, length = NULL, center = NULL)"},{"path":"/reference/set_restoration_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set restoration plot — set_restoration_plot","text":"input input (defaults NULL) width width metres length length metres center yet defined, later change centre point","code":""},{"path":"/reference/settle_particles.html","id":null,"dir":"Reference","previous_headings":"","what":"Settle Particles — settle_particles","title":"Settle Particles — settle_particles","text":"Function determine probability settlement particles pass suitable substrate options: additive (p=1, settle somewhere habitat along particle trajectory regardless time) lagged (p=1, settle somewhere habitat first 10 minutes) rapid (p=1, settle immediately habitat trajectory )","code":""},{"path":"/reference/settle_particles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Settle Particles — settle_particles","text":"","code":"settle_particles(input, probability = \"additive\", silent = TRUE, ...)"},{"path":"/reference/settle_particles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Settle Particles — settle_particles","text":"input input (defaults particle_points_expanded seed_particles() function) probability one \"additive\", \"rapid\", \"lagged\") silent silence outputs ... pass arguments","code":""},{"path":"/reference/settlement_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Settlement density — settlement_density","title":"Settlement density — settlement_density","text":"Function calculate settlement density across grid Uses sp::instead sf speed","code":""},{"path":"/reference/settlement_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Settlement density — settlement_density","text":"","code":"settlement_density(   input = NULL,   combined = FALSE,   cellsize = 20,   concavity = 1.2,   length_threshold = 10,   ... )"},{"path":"/reference/settlement_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Settlement density — settlement_density","text":"input input (defaults NULL) combined test allow multiple coralseed file inputs list (defaults FALSE) cellsize dimensions grid count settlers (defaults 20m) concavity concavity value passed concaveman (defaults 2 length_threshold length threshold passed concaveman (defaults 0) ... pass arguments","code":""},{"path":"/reference/settlement_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Settlement statistics — settlement_statistics","title":"Settlement statistics — settlement_statistics","text":"Function generate settlement statistics coralseed output","code":""},{"path":"/reference/settlement_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Settlement statistics — settlement_statistics","text":"","code":"settlement_statistics(   input = NULL,   combined = FALSE,   cellsize = 20,   concavehull = TRUE,   concavity = 2,   length_threshold = 0,   ... )"},{"path":"/reference/settlement_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Settlement statistics — settlement_statistics","text":"input input (defaults NULL) combined test allow multiple coralseed file inputs list (defaults FALSE) cellsize dimensions grid count settlers (defaults 20m) concavehull return concave hull around settled particles (via concaveman) concavity concavity value passed concaveman (defaults 2 length_threshold length threshold passed concaveman (defaults 0) ... pass arguments","code":""},{"path":"/reference/simulate_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Mortality — simulate_mortality","title":"Simulate Mortality — simulate_mortality","text":"Function simulate mortality population. simulate.mortality.n proportion population simulate mortality 24hr period.","code":""},{"path":"/reference/simulate_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Mortality — simulate_mortality","text":"","code":"simulate_mortality(   input,   simulate.mortality = NULL,   simulate.mortality.n = 0.1,   return.plot = TRUE,   silent = FALSE,   set.seed = NULL,   ... )"},{"path":"/reference/simulate_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Mortality — simulate_mortality","text":"input input (defaults particle_points_expanded seed_particles() function) simulate.mortality select type mortality (one \"typeI\", \"typeII\", \"typeIII\") simulate.mortality.n proportion population kill (0 = none, 1 = 100% mortality) return.plot show plot results (defaults FALSE) silent silence printing results running (defaults FALSE) set.seed set seed consistent results (defaults NULL) ... pass arguments","code":""},{"path":"/reference/simulate_mortality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Mortality — simulate_mortality","text":"Currently set mortality types ,II,III parameterised weibull distribution (return.plot=TRUE visualise results 1000 simulations) tmp <- simulate_mortality(particle_points_expanded, simulate.mortality=\"typeIII\",  simulate.mortality.n = 0.2, return.plot=TRUE)","code":""},{"path":"/reference/test_functioning.html","id":null,"dir":"Reference","previous_headings":"","what":"Test function — test_functioning","title":"Test function — test_functioning","text":"Test function","code":""},{"path":"/reference/test_functioning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test function — test_functioning","text":"","code":"test_functioning(input)"},{"path":"/reference/test_functioning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test function — test_functioning","text":"input input","code":""}]
